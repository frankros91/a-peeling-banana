{"version":3,"sources":["resolvers/ingredient-search.js","App.js","serviceWorker.js","index.js","assets/daily-harvest-logo.jpg"],"names":["resolveIngredientSearch","searchTerm","_searchTerm","trim","toLowerCase","searchIngredientIds","reduce","ingredients","result","ingredient","includes","name","push","id","filter","products","product","matchingIngredientsIds","intersection","ingredient_ids","length","DEFAULT_SEARCH_RESULTS","ProductList","searchValue","buildIngredientList","loading","map","ingredientId","find","getIngredientById","ingredientName","startIndex","indexOf","endIndex","prefixedText","substring","boldedText","postText","key","className","buildBoldedIngredient","productListItems","IngredientSearch","useState","setLoading","setSearchValue","searchResults","setSearchResults","delayedSearch","useRef","debounce","_searchValue","a","Promise","resolve","setTimeout","_searchResults","trailing","current","Fragment","placeholder","value","type","onChange","e","target","App","fluid","justify","xs","sm","lg","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.94155efe.chunk.js","sourcesContent":["/**\r\n * Putting search logic in it's own file.  Ideally in a production environment, we would aim to do this search serverside with full text search support.\r\n */\r\n\r\n// data imports\r\nimport { products } from '../data/products.json'\r\nimport { ingredients } from '../data/ingredients.json'\r\n\r\n/**\r\n * lodash imports\r\n * I'm a big fan of this library.  I think I've probably included it in every node project I've built.\r\n * A lot of this functionality is now baseline with ES6+, but lodash aims to optimize commonly used intertee functions\r\n */\r\nimport find from 'lodash/find'\r\nimport reduce from 'lodash/reduce'\r\nimport includes from 'lodash/includes'\r\nimport filter from 'lodash/filter'\r\nimport intersection from 'lodash/intersection'\r\n\r\n/**\r\n * resolveIngredientSearch\r\n * @param {String} searchTerm \r\n * \r\n * I decided to make the search function off an \"includes\" rather than strict equality.\r\n * This way, we can support partial matches.\r\n * If a user searches \"Organic\", they will see all results that contain \"organic\" anywhere in the ingredient name.\r\n */\r\nfunction resolveIngredientSearch(searchTerm) {\r\n  /**\r\n   * sanitize the input by trimming away any trailing spaces\r\n   * lowercase the input for text comparison so our search is case-insensitive\r\n   * technically this is a second trim() since the component already trimed the value on the component side...but wanted to keep this here to simulate a server environment\r\n   */\r\n  const _searchTerm = searchTerm.trim().toLowerCase()\r\n  \r\n  // Early out here for wher the user clears out the input\r\n  if (!_searchTerm) return []\r\n  \r\n  /**\r\n   * First we need to find the IDs of the ingredients that match the serach term\r\n   * Here we reduce the array of ingredient objects down to an array of ingredient IDs that match the search value\r\n   */\r\n  const searchIngredientIds = reduce(ingredients, (result, ingredient) => {\r\n    /**\r\n     * here im checking if the ingredient name includes our search term, remember to lowercase for case-insensitivity\r\n     * if the the includes passes, the ingredient ID is pushed on to the resulting array\r\n     */ \r\n    if (includes(ingredient.name.toLowerCase(), _searchTerm)) result.push(ingredient.id)\r\n    return result\r\n  }, [])\r\n\r\n  /**\r\n   * now that we have an array of ingredient IDs based off the users search,\r\n   * the last thing we need to do is filter the product data for those that included any of the IDs in the searchIngredientIds array\r\n   * if the intersection of product.ingredient_ids and searchResultIngredientIds is greater than 0,\r\n   * it means the product contains at least 1 matching ingredient, so return it in the result.\r\n   */\r\n  const filtered = filter(products, product => {\r\n    // create the intersecting array\r\n    const matchingIngredientsIds = intersection(product.ingredient_ids, searchIngredientIds)\r\n\r\n    /**\r\n     * saving off new array on product that represents which ingredients matched the users search\r\n     * I will later leverage this array to bolden the matching serch term in the UI\r\n     */ \r\n    product.matchingIngredientsIds = matchingIngredientsIds\r\n\r\n    // return boolean to indicate if product should be included in filter\r\n    return matchingIngredientsIds.length > 0\r\n  })\r\n\r\n  return filtered\r\n}\r\nexport default resolveIngredientSearch\r\n\r\n/**\r\n * getIngredientById\r\n * @param {Int} ingredientId \r\n * get the ingredient object by its ID\r\n */\r\nexport const getIngredientById = (ingredientId) => {\r\n  return find(ingredients, (ingredient) => ingredient.id === ingredientId)\r\n}","import React, { useState, useEffect, useRef } from 'react'\nimport { Container, Row, Col } from 'react-grid-system';\nimport includes from 'lodash/includes'\nimport debounce from 'lodash/debounce'\nimport logo from './assets/daily-harvest-logo.jpg'\nimport resolveIngredientSearch, { getIngredientById } from './resolvers/ingredient-search'\nimport './App.css'\n\nconst DEFAULT_INGREDIENT_SEARCH = 'Organic Banana'\nconst DEFAULT_PLACEHOLDER_TEXT = 'Hungry for ...'\nconst DEFAULT_SIMULATED_NETWORK_DELAY = 250\nconst DEFAULT_SEARCH_RESULTS = resolveIngredientSearch(DEFAULT_INGREDIENT_SEARCH)\n\nfunction ProductList ({ products, searchValue, loading }) {\n\n  const buildBoldedIngredient = (ingredient, searchValue) => {\n    // trimming this just in case there is bad data in the DB\n    let ingredientName = ingredient.name.trim()\n    // find the index of the search value, this way we can bold the partial results\n    const startIndex = ingredientName.toLowerCase().indexOf(searchValue.trim().toLowerCase())\n    const endIndex = startIndex + searchValue.length\n\n    const prefixedText = ingredientName.substring(0, startIndex)\n    const boldedText = ingredientName.substring(startIndex, endIndex)\n    const postText = ingredientName.substring(endIndex, ingredientName.length)\n    return (\n      <li key={`ingredient-${ingredient.id}`} className=\"Left\">\n        <span>{prefixedText}<b>{boldedText}</b>{postText}</span>\n      </li>\n    )\n  }\n\n  const buildIngredientList = (product) => {\n    return product.ingredient_ids.map(ingredientId => {\n      const ingredient = getIngredientById(ingredientId)\n      if (includes(product.matchingIngredientsIds, ingredientId)) {\n        return buildBoldedIngredient(ingredient, searchValue)\n      } else return <li key={ingredientId} className=\"Left\">{ingredient.name}</li>\n    })\n  }\n\n  const productListItems = products.map(product => {\n    return (\n      <li key={`product-${product.id}`}>\n        <span>{product.name}</span>\n        <ul>\n          {buildIngredientList(product)}\n        </ul>\n      </li>\n    )\n  })\n\n  return (\n    <ul>\n      {productListItems}\n    </ul>\n  )\n}\n\nfunction IngredientSearch () {\n  const [loading, setLoading] = useState(false)\n  const [searchValue, setSearchValue] = useState(DEFAULT_INGREDIENT_SEARCH)\n  const [searchResults, setSearchResults] = useState(DEFAULT_SEARCH_RESULTS)\n  \n  const delayedSearch = useRef(debounce(async (_searchValue) => {\n    // add an artificial delay of 500 ms to simulate a network request\n    await new Promise(resolve => setTimeout(resolve, DEFAULT_SIMULATED_NETWORK_DELAY))\n    const _searchResults = resolveIngredientSearch(_searchValue)\n    setSearchResults(_searchResults)\n    setLoading(false)\n  }, 300, {trailing: true})).current\n\n  const handleInputChange = (e) => {\n    setLoading(true) // setting loading to true here to account for the debounce time as well as simulated network time\n    setSearchValue(e.target.value)\n    delayedSearch(e.target.value.trim())\n  }\n\n  const getLoadingOrNoResults = () => {\n    if (loading) return <div className=\"Loader\"></div>\n    if (searchValue && searchResults.length === 0) {\n      return (\n        <Col>\n          <div className=\"SorryMessage\">\n            <span>{`Sorry! Looks like we are fresh out of`}</span>\n            <br></br>\n            <span><i>{`\"${searchValue}\"`}</i></span>\n          </div>\n        </Col>\n      )\n    }\n  }\n\n  // still need to debounce\n  return (\n    <React.Fragment>\n      <Row>\n        <input className=\"SearchInput\" placeholder={DEFAULT_PLACEHOLDER_TEXT} value={searchValue} type='search' onChange={handleInputChange}></input>\n      </Row>\n      <Row>\n        { \n          loading || searchResults.length === 0 ? getLoadingOrNoResults() : <ProductList products={searchResults} searchValue={searchValue}/>\n        }\n      </Row>\n    </React.Fragment>\n  )\n}\n\n/**\n   * App is built off a simple grid system.  Usually this is provided through an entire UI library suite such as Bootstrap\n   * Bringing in something like Bootstrap would give me a lot of stuff I do not need, so I found a nice grid system library to use instead\n   * https://github.com/sealninja/react-grid-system\n   * \n   * App renders The Daily Harvest logo and a React Component that handles the search and it's results\n   * \n   */\nfunction App() { \n  return (\n    <Container className='AppContainer' fluid>\n      <Row justify='center'>\n        {/* gutter */}\n        <Col xs={1} sm={3} lg={3}></Col>\n        <Col xs={10} sm={6} lg={4}>\n          <div>\n            <Row>\n              <img className=\"AppLogo\" src={logo} alt=\"logo\" />\n            </Row>\n            <IngredientSearch />\n          </div>\n        </Col>\n        {/* gutter */}\n        <Col xs={1} sm={3} lg={4}></Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/daily-harvest-logo.68c0e9f0.jpg\";"],"sourceRoot":""}