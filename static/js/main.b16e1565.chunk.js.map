{"version":3,"sources":["resolvers/ingredient-search.js","IngredientSearch/ProductCard.js","IngredientSearch/ProductList.js","IngredientSearch/index.js","App.js","serviceWorker.js","index.js","assets/daily-harvest-logo.jpg"],"names":["resolveIngredientSearch","searchTerm","_searchTerm","trim","toLowerCase","searchIngredientIds","reduce","ingredients","result","ingredient","includes","name","push","id","filtered","forEach","products","product","_product","matchingIngredientsIds","intersection","ingredient_ids","length","collection","ProductCard","searchValue","useState","imageUrl","setImageUrl","useEffect","productId","_imageUrl","productImages","justify","className","src","alt","map","ingredientId","find","getIngredientById","ingredientName","_searchValue","startIndex","indexOf","endIndex","prefixedText","substring","boldedText","postText","key","buildBoldedIngredient","MemoizedProductCard","memo","prevProps","nextProps","isEqual","ProductList","productListItems","aria-label","DEFAULT_SEARCH_RESULTS","IngredientSearch","loading","setLoading","setSearchValue","searchResults","setSearchResults","debouncedSearch","useRef","debounce","a","Promise","resolve","setTimeout","_searchResults","trailing","current","Fragment","placeholder","value","type","onChange","e","target","araia-label","AppLogo","logo","App","fluid","xs","sm","lg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.b16e1565.chunk.js","sourcesContent":["/**\n * Putting search logic in it's own file.  Ideally in a production environment, we would aim to do this search serverside with full text search support.\n */\nimport { products } from '../data/products.json'\nimport { ingredients } from '../data/ingredients.json'\nimport productImages from '../data/product-images.json'\n\nimport find from 'lodash/find'\nimport reduce from 'lodash/reduce'\nimport includes from 'lodash/includes'\nimport forEach from 'lodash/forEach'\nimport intersection from 'lodash/intersection'\n\n/**\n * resolveIngredientSearch\n * @param {String} searchTerm \n * \n * I decided to make the search function off an \"includes\" rather than strict equality.\n * This way, we can support partial matches.\n * If a user searches \"Organic\", they will see all results that contain \"organic\" anywhere in the ingredient name.\n */\nfunction resolveIngredientSearch(searchTerm) {\n  /**\n   * sanitize the input by trimming away any trailing spaces\n   * lowercase the input for text comparison so our search is case-insensitive\n   * technically this is a second trim() since the component already trimed the value on it's side...but wanted to keep this here to simulate a server environment\n   */\n  const _searchTerm = searchTerm.trim().toLowerCase()\n  \n  // Early out here for wher the user clears out the input\n  if (!_searchTerm) return []\n  \n  /**\n   * First we need to find the IDs of the ingredients that match the serach term\n   * Here we reduce the array of ingredient objects down to an array of ingredient IDs that match the search value\n   */\n  const searchIngredientIds = reduce(ingredients, (result, ingredient) => {\n    /**\n     * here im checking if the ingredient name includes our search term, remember to lowercase for case-insensitivity\n     * if the the includes passes, the ingredient ID is pushed on to the resulting array\n     */ \n    if (includes(ingredient.name.toLowerCase(), _searchTerm)) result.push(ingredient.id)\n    return result\n  }, [])\n\n  /**\n   * now that we have an array of ingredient IDs based off the users search,\n   * the last thing we need to do is filter the product data for those that included any of the IDs in the searchIngredientIds array\n   * if the intersection of product.ingredient_ids and searchResultIngredientIds is greater than 0,\n   * it means the product contains at least 1 matching ingredient, so return it in the result.\n   */\n  let filtered = []\n  forEach(products, product => {\n    // create a copy of the product as not to modify input parameter\n    const _product = { ...product }\n    // create the intersecting array\n    const matchingIngredientsIds = intersection(_product.ingredient_ids, searchIngredientIds)\n    /*\n     * saving off new array on product that represents which ingredients matched the users search\n     * I will later leverage this array to bolden the matching serch term in the UI\n     */ \n    _product.matchingIngredientsIds = matchingIngredientsIds\n\n    // if the intersecting array length is greater than 0, we have a match so push the product into the resulting array\n    if (matchingIngredientsIds.length > 0) filtered.push(_product)\n\n    /**\n     * one of the last things I'm adding here at Sunday morning after taking a final pass at the project\n     * realized it would be cool for the user to be able to search \"Smoothie\" or \"Bowl\" and get some results\n     */\n    else if (includes(product.collection.toLowerCase(), _searchTerm)) filtered.push(_product)\n  })\n\n  // return the filtered array\n  return filtered\n}\nexport default resolveIngredientSearch\n\n/**\n * getIngredientById\n * @param {Int} ingredientId \n * get the ingredient object by its ID\n */\nexport const getIngredientById = (ingredientId) => {\n  return find(ingredients, (ingredient) => ingredient.id === ingredientId)\n}\n\n/**\n * getImageUrlByProductId\n * @param {Int} productId\n * get the image url of the product\n */\nexport const getImageUrlByProductId = (productId) => {\n  return productImages[productId]\n}","import React, { useState, useEffect } from 'react'\nimport { Row } from 'react-grid-system'\nimport includes from 'lodash/includes'\nimport { getIngredientById, getImageUrlByProductId } from '../resolvers/ingredient-search'\n\n/**\n * \n * props {\n *   products: [Product],\n *   searchValue: String\n * } \n * \n * ProductCard is a simple Card style Component that displays an image of the product (pulled from your website)\n * The Product Name\n * The Products list of Ingredients (matching serch terms are bolded)\n */\nfunction ProductCard ({ product, searchValue }) {\n  const [imageUrl, setImageUrl] = useState('') // intialize image url state\n\n  useEffect(() => { // hook for grabbing the url, listening to product for changes\n    const _imageUrl = getImageUrlByProductId(product.id)\n    setImageUrl(_imageUrl)\n  }, [product])\n\n\n  /**\n   * Builder function responsible for building the bolded ingredient text for search match\n   * @param { id: Int, name: String, is_allergen: Boolean } ingredient \n   * @param String searchValue \n   */\n  const buildBoldedIngredient = (ingredient) => {\n    let ingredientName = ingredient.name.trim() // trimming this just in case there is bad data in the DB\n    let _searchValue = searchValue.trim() // trim the input from the user\n\n    const startIndex = ingredientName.toLowerCase().indexOf(_searchValue.trim().toLowerCase()) // find the starting index of the searchValue in the ingredient name\n    const endIndex = startIndex + _searchValue.length // find the endIndex by adding the length of the searchValue string\n\n    const prefixedText = ingredientName.substring(0, startIndex) // create a substring for any potential characters before the match\n    const boldedText = ingredientName.substring(startIndex, endIndex) // create a substring that is characters that match the search and thus should be bold\n    const postText = ingredientName.substring(endIndex, ingredientName.length) // create a substring for any potential characters after the match\n\n    // return the combined text\n    return (\n      <li className='IngredientListItem' key={`ingredient-${ingredient.id}`}>\n        <span>{prefixedText}<b>{boldedText}</b>{postText}</span>\n      </li>\n    )\n  }\n\n  /**\n   * Builder function to build the list items to display the products ingredients\n   * @param { id: Int, name: String, collection: String, ingredient_ids: [Int], matchingIngredientIds: [Int] } product \n   */\n  const buildIngredientListItems = () => {\n    return product.ingredient_ids.map(ingredientId => { // loop over products ingredients\n      const ingredient = getIngredientById(ingredientId) // get the ingredient by it's id\n      \n      if (!ingredient) return null // we could not find the given ingredient, skip it for now **come back to this if I have time, shouldn't ever occur since we are dealing with local data files**\n      \n      if (includes(product.matchingIngredientsIds, ingredientId)) { // check if the current ingredient is in the matching array\n        return buildBoldedIngredient(ingredient, searchValue)  // if it is, build bolded <li>\n      } else return <li className='IngredientListItem' key={`ingredient-${ingredient.id}`}><span>{ingredient.name}</span></li> // else build regular <li>\n    })\n  }\n\n  /**\n   * Return the constructed card object\n   */\n  return (\n    <li>\n      <Row justify='center'>\n        <div className=\"Card\">\n          <div className='ProductImageContainer'>\n            <img className=\"ProductImage\" src={imageUrl} alt=\"Avatar\" />\n          </div>\n          <div className=\"CardContainer\">\n            <span className=\"ProductName\"><b>{ product.name }</b></span>\n            <br />\n            <ul className=\"comma-list IngredientList\">\n              {\n                buildIngredientListItems()\n              }\n            </ul>\n          </div>\n        </div>\n      </Row>\n    </li>\n  )\n}\n\nexport default ProductCard\n","import React, { memo } from 'react'\nimport isEqual from 'lodash'\nimport ProductCard from './ProductCard'\n/**\n * \n * props {\n *   products: [Product],\n *   searchValue: String\n * } \n * \n * ProductList component is responsible for displaying a list of products.\n * It is fed an array of products to display\n * It creates a bunch of ProductCard components and renders them in a simple list\n */\nfunction ProductList ({ products, searchValue }) {\n  /**\n   * Build an array of <ProductCards> to be fed into the parent <ul>\n   * Each ProductCard represents a product\n   */\n  const productListItems = products.map(product => {\n    return <MemoizedProductCard key={`product-${product.id}`} product={product} searchValue={searchValue} />\n  })\n\n  // return the enture <ul> and it's child product <li>s\n  return (\n    <ul className=\"ProductList\" aria-label='product-list'>\n      {productListItems}\n    </ul>\n  )\n}\n\n/**\n * This is to ensure the ProductCard only preforms a re-render if the product it is listening to has changed.\n * Otherwise, updates would run for every card on the screen even if it's product hasn't changed\n */\nconst MemoizedProductCard = memo(ProductCard, (prevProps, nextProps) => {\n  return isEqual(prevProps.product, nextProps.product)\n})\n\nexport default ProductList\n","import React, { useState, useRef } from 'react'\nimport { Row, Col } from 'react-grid-system';\nimport debounce from 'lodash/debounce'\nimport resolveIngredientSearch from '../resolvers/ingredient-search'\nimport ProductList from './ProductList'\n\nexport const DEFAULT_INGREDIENT_SEARCH = 'Organic Banana'\nexport const DEFAULT_PLACEHOLDER_TEXT = 'Hungry for . . .'\nexport const DEFAULT_SIMULATED_NETWORK_DELAY_MILLISECONDS = 100\nexport const DEFAULT_DEBOUNCE_MILLISECONDS = 300\n\n/**\n * here i am running the search algorithm at bootstrap of the application.\n * this is done only to be technically correct in solving the problem,\n * that is, 'please write a program that returns all of the products that contain the ingredient \"Organic Banana\"'\n * in a real world scenario, we would probably just initialize the search to be empty\n */\nconst DEFAULT_SEARCH_RESULTS = resolveIngredientSearch(DEFAULT_INGREDIENT_SEARCH)\n\n/**\n * Main component that drives the search\n * Holds state for loading, user input, and search results\n * Renders and <input> and one of:\n *   loading indicator\n *   a no results message\n *   a <ProductList /> - React Component responsible for displaying a list of products\n */\nfunction IngredientSearch () {\n  const [loading, setLoading] = useState(false)  // initialize loading state to false\n  const [searchValue, setSearchValue] = useState(DEFAULT_INGREDIENT_SEARCH)  // initialize searchValue state to a default search term\n  const [searchResults, setSearchResults] = useState(DEFAULT_SEARCH_RESULTS) // initialize searchResults to the default results that were calculated at bootstrap of app\n  \n  /**\n   * Following block of code defines a function which I store to the variable titled debouncedSearch\n   * It is wrapped in a debounce, which makes it so we won't execute the search until the user done typing (currently 300ms)\n   * It also adds an artifical delay of DEFAULT_SIMULATED_NETWORK_DELAY to simulate the time it would take to fetch some data from a remote server (currently 100 ms) \n   */\n  const debouncedSearch = useRef(debounce(async (_searchValue) => {\n    await new Promise(resolve => setTimeout(resolve, DEFAULT_SIMULATED_NETWORK_DELAY_MILLISECONDS)) // artificial delay using Promise + setTimeout\n    const _searchResults = resolveIngredientSearch(_searchValue) // do the actual search\n    setSearchResults(_searchResults) // set the results to react state\n    setLoading(false) // set the loading to false\n  }, DEFAULT_DEBOUNCE_MILLISECONDS, {trailing: true})).current\n\n  /**\n   * onChange listener for input\n   * Sets the searchValue state to what the user typed in the input\n   * Invokes a delayedSearch with the trimmed serachValue\n   */\n  const handleInputChange = (e) => {\n    setLoading(true) // setting loading to true here to account for the debounce time as well as simulated network time\n    setSearchValue(e.target.value)  // set the searchValue state to the value of the <input>\n    debouncedSearch(e.target.value.trim()) // call our network simulated debouncedSearch with the trimmed input\n  }\n\n  /**\n   * Builder function that returns either:\n   *   a loading indicator\n   *     or\n   *   a message indicating no results\n   */\n  const buildLoadingOrNoResults = () => {\n    if (loading) return <Row><div className=\"Loader\"></div></Row>// if we are loading, then return the loader\n    if (searchValue && searchResults.length === 0) { // if loading is false, searchValue is defined (the user has entered text), and the result array is 0, then return a \"no results\" type of messaging\n      return (\n        <Row>\n          <Col>\n            <div araia-label='no-result-div' className=\"SorryMessage\">\n              <span>{`Sorry! Looks like we are fresh out of`}</span>\n              <br></br>\n              <span><i>{`\"${searchValue}\"`}</i></span>\n            </div>\n          </Col>\n        </Row>\n      )\n    }\n  }\n\n  /**\n   * Return JSX\n   * Tow Row system\n   *   - first row is for the input\n   *   - second row is for the loading indicator, <ProductList />, or a \"no results\" style message\n   */\n  return (\n    <React.Fragment>\n      <Row justify='center'>\n        <input aria-label='ingredient-search' className=\"SearchInput\" placeholder={DEFAULT_PLACEHOLDER_TEXT} value={searchValue} type='search' onChange={handleInputChange}></input>\n      </Row>\n      { \n        loading || searchResults.length === 0 ? buildLoadingOrNoResults() : <ProductList products={searchResults} searchValue={searchValue}/>\n      }\n    </React.Fragment>\n  )\n}\n\nexport default IngredientSearch","import './App.css'\nimport React from 'react'\nimport { Container, Row, Col } from 'react-grid-system';\nimport logo from './assets/daily-harvest-logo.jpg'\n\nimport IngredientSearch from './IngredientSearch'\n\n/**\n * Might not be completely necessary for this to be it's own React Component, but in a production environment we might need to do more with the logo like grab a URL from a remote\n */\nfunction AppLogo() {\n  return (\n    <Row>\n      <img className=\"AppLogo\" src={logo} alt=\"logo\" />\n    </Row>\n  )\n}\n\n/**\n   * App is built off a simple grid system.  Usually this is provided through an entire UI library suite such as Bootstrap\n   * Bringing in something like Bootstrap would give me a lot of stuff I do not need, so I found a nice grid system library to use instead\n   * https://github.com/sealninja/react-grid-system\n   * \n   * App renders The Daily Harvest logo and a React Component that handles the search and it's results\n   * \n   */\nfunction App() { \n  return (\n    <Container className='AppContainer' fluid>\n      <Row justify='center'>\n        {/* gutter */}\n        <Col xs={1} sm={3} lg={4}></Col>\n        <Col xs={10} sm={6} lg={4}>\n          <div>\n            <AppLogo />\n            <IngredientSearch />\n          </div>\n        </Col>\n        {/* gutter */}\n        <Col xs={1} sm={3} lg={4}></Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/daily-harvest-logo.68c0e9f0.jpg\";"],"sourceRoot":""}