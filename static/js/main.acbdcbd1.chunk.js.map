{"version":3,"sources":["resolvers/ingredient-search.js","App.js","serviceWorker.js","index.js","assets/daily-harvest-logo.jpg"],"names":["resolveIngredientSearch","searchTerm","trim","toLowerCase","searchIngredientIds","reduce","ingredients","result","ingredient","key","includes","name","push","id","filter","products","product","matchingIngredientsIds","intersection","ingredient_ids","length","ProductList","searchValue","buildIngredientList","map","ingredientId","find","getIngredientById","ingredientName","startIndex","indexOf","endIndex","prefixedText","substring","boldedText","postText","style","textAlign","buildBoldedIngredient","productNames","ingredientList","fontWeight","IngredientSearch","useState","setSearchValue","searchResults","setSearchResults","useEffect","_searchResults","className","placeholder","value","type","onChange","e","target","App","fluid","minWidth","xs","sm","width","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.acbdcbd1.chunk.js","sourcesContent":["/**\r\n * Putting search logic in it's own file.  Ideally in a production environment, we would aim to do this search serverside with full text search support.\r\n */\r\nimport { products } from '../data/products.json'\r\nimport { ingredients } from '../data/ingredients.json'\r\nimport find from 'lodash/find'\r\nimport reduce from 'lodash/reduce'\r\nimport includes from 'lodash/includes'\r\nimport filter from 'lodash/filter'\r\nimport intersection from 'lodash/intersection'\r\n\r\n/**\r\n * I decided to make the search work off an includes rather than a strict equality.\r\n * This way, we can support partial matches.\r\n * If a use searches \"Organic\", they will see all results with organic ingredients.\r\n */\r\n\r\nfunction resolveIngredientSearch(searchTerm) {\r\n  // sanitize the input\r\n  searchTerm = searchTerm.trim().toLowerCase()\r\n  \r\n  // early return for empty string case\r\n  if (!searchTerm) return []\r\n  /**\r\n   * First we need to find the IDs of the ingredients that match the serach term\r\n   */\r\n  const searchIngredientIds = reduce(ingredients, (result, ingredient, key) => {\r\n    if (includes(ingredient.name.toLowerCase(), searchTerm)) result.push(ingredient.id)\r\n    return result\r\n  }, [])\r\n\r\n  return filter(products, (product) => {\r\n    /**\r\n     * If the intersection of productIngredientIds and searchResultIngredientIds is greater than 0\r\n     * it means the product contains at least 1 matching ingredient, so return it in the result.\r\n     */\r\n    const matchingIngredientsIds = intersection(product.ingredient_ids, searchIngredientIds)\r\n    product.matchingIngredientsIds = matchingIngredientsIds\r\n    return matchingIngredientsIds.length > 0\r\n  })\r\n}\r\n\r\nexport const getIngredientById = (ingredientId) => {\r\n  return find(ingredients, (ingredient) => ingredient.id === ingredientId)\r\n}\r\n\r\nexport default resolveIngredientSearch","import React, { useState, useEffect } from 'react'\nimport { Container, Row, Col } from 'react-grid-system';\nimport includes from 'lodash/includes'\nimport logo from './assets/daily-harvest-logo.jpg'\nimport resolveIngredientSearch, { getIngredientById } from './resolvers/ingredient-search'\nimport './App.css'\n\nconst DEFAULT_INGREDIENT_SEARCH = 'Organic Banana'\nconst DEFAULT_PLACEHOLDER_TEXT = 'Hungry for ...'\n\nfunction ProductList ({ products, searchValue }) {\n  const buildBoldedIngredient = (ingredient, searchValue) => {\n    let ingredientName = ingredient.name.trim()\n    // find the index of the search value, this way we can bold the partial results\n    const startIndex = ingredientName.toLowerCase().indexOf(searchValue.trim().toLowerCase())\n    const endIndex = startIndex + searchValue.length\n    const prefixedText = ingredientName.substring(0, startIndex)\n    const boldedText = ingredientName.substring(startIndex, endIndex)\n    const postText = ingredientName.substring(endIndex, ingredientName.length)\n    return (\n      <li style={{textAlign: 'left'}}>\n        <span>{prefixedText}<b>{boldedText}</b>{postText}</span>\n      </li>\n    )\n  }\n  const buildIngredientList = (product) => {\n    return product.ingredient_ids.map(ingredientId => {\n      const ingredient = getIngredientById(ingredientId)\n      if (includes(product.matchingIngredientsIds, ingredientId)) {\n        return buildBoldedIngredient(ingredient, searchValue)\n        // return <li style={{textAlign: 'left'}}>{ingredient.name}</li>\n      } else return <li style={{textAlign: 'left'}}>{ingredient.name}</li>\n    })\n  }\n  const productNames = products.map(product => {\n    const ingredientList = buildIngredientList(product)\n    return (\n      <li>\n        <div style={{textAlign: 'left', fontWeight: 'bold'}}> \n          <span>{product.name}</span>\n        </div>\n        <ul>\n          {ingredientList}\n        </ul>\n      </li>\n    )\n  })\n  return (\n    <ul>\n      {productNames}\n    </ul>\n  )\n}\n\nfunction IngredientSearch () {\n  const [searchValue, setSearchValue] = useState(DEFAULT_INGREDIENT_SEARCH)\n  const [searchResults, setSearchResults] = useState([])\n  \n  useEffect(() => {\n    const _searchResults = resolveIngredientSearch(searchValue)\n    setSearchResults(_searchResults)\n  }, [searchValue])\n\n  const handleInputChange = (e) => {\n    setSearchValue(e.target.value)\n  }\n\n  return (\n    <div>\n      <Row>\n        <input className=\"Search-input\" placeholder={DEFAULT_PLACEHOLDER_TEXT} value={searchValue} type='search' onChange={handleInputChange}></input>\n      </Row>\n      <Row>\n        <ProductList products={searchResults} searchValue={searchValue} />\n      </Row>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <Container fluid style={{minWidth: '320px'}}>\n      <Row>\n        <Col xs={1} sm={3}></Col>\n        <Col xs={10} sm={6}>\n          <div>\n            <Row>\n              <img style={{width: '100%'}} src={logo} className=\"App-logo\" alt=\"logo\" />\n            </Row>\n            <IngredientSearch />\n          </div>\n        </Col>\n        <Col xs={1} sm={6}></Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/daily-harvest-logo.68c0e9f0.jpg\";"],"sourceRoot":""}